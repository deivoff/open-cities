# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type City {
  _id: ID!
  name: String!
  url: String!
  photo: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Geo {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User!
  layer: Layer!
  access: UserType!
  geometry: Geometry!
  properties: JSON!
}

input GeoInput {
  geometry: GeometryInput!
  properties: JSON!
  layer: ID!
}

type Geometry {
  type: GeometryType!
  coords: GeometryCoords!
}

"""Coordinates scalar type"""
scalar GeometryCoords

input GeometryInput {
  type: GeometryType!
  coords: GeometryCoords!
}

enum GeometryType {
  Point
  MultiPoint
  LineString
  MultiLineString
  Polygon
  MultiPolygon
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Layer {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  owner: User!
  subscribers: [User!]!
  geoCollection: [Geo!]!
}

input LayerInput {
  name: String!
  description: String!
}

type Mutation {
  createLayer(layerInput: LayerInput!): Layer!
  createGeo(geoInput: GeoInput!): Geo!
}

type Query {
  getUsers: [User!]!
  cities: [City!]!
  layers(userID: String!): [Layer!]!
  geos: [Geo!]!
}

type User {
  _id: ID!
  name: UserName!
  role: UserType!
  photos: [UserPhoto!]!
}

type UserName {
  familyName: String!
  givenName: String!
}

type UserPhoto {
  url: String!
}

enum UserType {
  user
  researcher
  admin
}
